# Введение в FastAPI

'''
План занятия:
1) Введение (5 минут)
2) Повторение HTTP и REST API (15 минут)
3) Знакомство с FastAPI (10 минут)
4) Установка и первый запуск FastAPI (25 минут)
5) Асинхронное программирование в FastAPI (10 минут)
6) Практическое задание (20 минут)
7) Заключение (5 минут)
'''

# -------------------------------------------------------------------------------------------------------------

# Повторение REST API и HTTP
'''
СОВЕТ ПРЕПОДАВАТЕЛЮ: ученики уже знакомы с этой информацией из ранее пройденных курсов.
Старайтесь задействовать студентов при повторении материала, но следите за таймингом.

Чтобы лучше понимать специфику работы с FastAPI, давайте вспомним, 
как вообще устроен обмен данными между клиентом и сервером, а также что такое REST API. 
Без этого будет сложно понять, зачем нам FastAPI и как он помогает в создании backend-приложений.

Любой сайт или приложение, которое вы используете, работает по принципу "клиент - сервер".
Например, клиент говорит: "Дай мне список товаров" → сервер отвечает: "Вот JSON со списком товаров".
Этот обмен идет по протоколу HTTP.

Вспомним основные моменты по протоколу HTTP:
1) Методы HTTP:
- GET - получить данные
- POST - отправить новые данные
- PUT/PATCH - изменить данные
- DELETE - удалить данные

2) Структура HTTP-запроса (на примере авторизации пользователя на сайте):
- URL (адрес ресурса)
https://example.com/login

- Метод (GET, POST и т.д.)
POST

- Заголовки (headers: тип данных, авторизация и т.д.)
Content-Type: application/json
Authorization: Bearer abcd1234token
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/114.0.5735.133

- Тело запроса (body, например JSON)
{
  "username": "ivan_petrov",
  "password": "qwerty123456"
}

3) Структура HTTP-ответа (на примере успешной авторизации пользователя на сайте):
- Статус-код (200 OK, 404 Not Found, 500 Server Error и т.д.)
200 OK

- Заголовки ответа (Date, Server, Content-Type и т.д.)
Date: Tue, 30 Jul 2025 12:45:01 GMT
Server: FastAPI/0.110.0
Content-Type: application/json

- Тело ответа (HTML, JSON и т.д.)
{
  "message": "Login successful",
  "user_id": 23
}

Когда мы заходим на сайт или отправляем форму, наш браузер посылает HTTP-запрос. 
Сервер его обрабатывает и отправляет обратно HTTP-ответ.
Именно эту функциональность мы и будем реализовывать с помощью FastAPI.

Теперь вспомним основную информацию про REST API:
1) API - способ взаимодействия программ между собой
2) REST API - стиль построения API, где:
- используются HTTP-методы (GET, POST, PUT, DELETE)
- ресурсы имеют уникальные URL
- для передачи данных чаще всего используется JSON
3) Пример REST API-запроса:
- GET /users - получить список пользователей
- GET /users/5 - получить пользователя с id=5
- POST /users - создать нового пользователя

Для наглядности обратимся к следующему публичному API:
https://jsonplaceholder.typicode.com/users

СОВЕТ ПРЕПОДАВАТЕЛЮ: рассмотрите полученный ответ вместе с учениками.

Вот так выглядит API вживую. Мы обращаемся по адресу и получаем JSON. 
FastAPI позволит нам создавать такие адреса самим.
'''

# -------------------------------------------------------------------------------------------------------------

# Знакомство с FastAPI
'''
FastAPI - современный, высокопроизводительный веб-фреймворк для Python, предназначенный для создания API.
FastAPI довольно прост в использовании и позволяет быстро начать создавать API для веб-приложений.
Помимо FastAPI существуют и другие веб-фреймворки для Python, о некоторых из них мы будем говорить
дальше при обучении.

В FastAPI мы создаем эндпоинты - Python-функции, которые обрабатывают определенные HTTP-запросы.
Каждый эндпоинт привязывается к:
- Маршруту (например, /users или /users/{id})
- Методу HTTP - GET, POST, PUT, DELETE

Что делает FastAPI при работе веб-приложения:
1) Получает запрос
2) Передает данные в нужную функцию
3) Формирует и отправляет ответ клиенту

Клиент (браузер)
        ↓ HTTP
FastAPI (маршруты → обработчики)
        ↓ HTTP
Ответ (JSON, HTML, файл)
'''

# -------------------------------------------------------------------------------------------------------------

# Установка и первый запуск FastAPI
'''
Перед установкой FastAPI сначала создадим и активируем виртуальное окружение, как мы это делали ранее на курсе:
python -m venv venv
source venv/bin/activate  # Linux/macOS
venv\scripts\activate     # Windows

Затем установим FastAPI, а также Uvicorn - специальный сервер, который может запускать FastAPI-приложение:
pip install fastapi uvicorn

Можно также сохранить зависимости нашего проекта в файл requirements.txt:
pip freeze > requirements.txt

Хоть сейчас наш проект и небольшой, но сохранять зависимости - полезная практика.

Создадим наше первое FastAPI-приложение, которое будет возвращать сообщение 'Hello, FastAPI!'
'''

# импортируем класс FastAPI
from fastapi import FastAPI

# создаем объект приложения
app = FastAPI()

# указываем маршрут для корневой папки и функцию для возвращения сообщения
@app.get('/')
def root():
    return {'message': 'Hello, FastAPI!'}

'''
Для запуска приложения на сервере uvicorn в терминале пропишем следующую команду:
uvicorn main:app --reload

- main - имя файла (main.py)
- app - объект FastAPI
--reload - автоматическая перезагрузка при изменениях в коде

После запуска сервер доступен по адресу http://127.0.0.1:8000/
При его открытии мы увидим следующий JSON:
{"message": "Hello, FastAPI!"}

FastAPI автоматически создает документацию для всех наших эндпоинтов.
Мы можем тестировать запросы прямо из браузера по следующему адресу:
http://127.0.0.1:8000/docs

СОВЕТ ПРЕПОДАВАТЕЛЮ: откройте ссылку с документацией и рассмотрите содержимое вместе со студентами.
Покажите как выглядит созданный endpoint, что происходит при нажатии кнопки Try it out
и обсудите полученный ответ после нажатия на кнопку Execute.
Рекомендуется таким образом тестировать каждый новый эндпоинт.

Ниже в коде добавим еще один эндпоинт для получения данных объекта по указанному ID.
Полный код будет выглядеть следующим образом:
'''
# импортируем класс FastAPI
from fastapi import FastAPI

# создаем объект приложения
app = FastAPI()

# указываем маршрут для корневой папки и функцию для возвращения сообщения
@app.get('/')
def root():
    return {'message': 'Hello, FastAPI!'}

# получение данных объекта по указанному ID
@app.get('/items/{item_id}')
def get_item(item_id: int):
    return {'item_id': item_id}

'''
При тестировании нового эндпоинта мы явного указываем значение item_id (например, 2), после чего получаем 
ответ в виде JSON (например, {"user_id": 2}).
'''

# -------------------------------------------------------------------------------------------------------------

# Асинхронное программирование в FastAPI
'''
Одной из главных особенностей FastAPI является его асинхронность, благодаря которой FastAPI-приложения
могут работать очень быстро и обрабатывать огромное количество запросов.

Асинхронность - способ выполнять задачи параллельно, не блокируя выполнение других операций.
В отличие от обычных (синхронных) функций, асинхронные позволяют не ждать, пока завершится долгая операция 
(например, запрос к БД или API), а продолжать работу. В современной разработке использование асинхронности
является важнейшим навыком при создании высоконагруженных систем и приложений.

Посмотрим на пример из жизни. Мы написали другу сообщение в мессенджере и ждем, пока он не ответит. 
При этом другими делами мы не занимаемся, просто сидим и ждем. 
И только после ответа друга мы можем делать что-то еще. Это пример синхронного выполнения задач. 
А если же мы написали другу и пошли заниматься своими делами, пока он не ответит
на сообщение, то это уже асинхронное выполнение задач. Очевидно, какой способ является более удобным 😁

Чтобы функция стала асинхронной, нужно в ее заголовке перед оператором def поставить ключевое слово async.
Проделаем это с нашими функциями:
'''
# импортируем класс FastAPI
from fastapi import FastAPI

# создаем объект приложения
app = FastAPI()

# указываем маршрут для корневой папки и функцию для возвращения сообщения
@app.get('/')
async def root():
    return {'message': 'Hello, FastAPI!'}

# получение данных объекта по указанному ID
@app.get('/items/{item_id}')
async def get_item(item_id: int):
    return {'item_id': item_id}

'''
Т.к. наше приложение довольно маленькое, мы не заметим разницу в скорости работы между синхронными и 
асинхронными функциями. Но в будущем, когда мы будем писать более серьезные программы, эта разница
станет заметна. Поэтому в дальнейшем все необходимые функции в FastAPI мы будем делать асинхронными.
Не переживайте, на курсе мы также будем постепенно изучать асинхронность в Python и применять ее при необходимости.
'''

# -------------------------------------------------------------------------------------------------------------

# Практическое задание
'''
СОВЕТ ПРЕПОДАВАТЕЛЮ: если позволяет тайминг, то дайте студентам время на самостоятельное выполнение задания,
после чего совместно разберите решение. Если времени не хватает, то сразу выполняйте задание вместе со студентами.

Задание: необходимо создать FastAPI-приложение с 3 эндпоинтами:
1) GET /
Возвращает приветственное сообщение
Пример ответа:
{"message": "Добро пожаловать в мое FastAPI-приложение!"}

2) GET /user/{username}
Принимает имя пользователя (строка) и возвращает приветствие для указанного имени
Пример входных параметров:
Миша
Пример ответа:
{"username": "Миша", "message": "Привет, Миша!"}

3) GET /profile/{username}
Принимает имя пользователя (строка) и возвращает профиль пользователя со следующей информацией:
- ID (генерируется случайно от 1 до 999)
- username
- age (генерируется случайно от 18 до 99)
- role (генерируется случайно между 'user' и 'admin')
Пример входных параметров:
Дима
Пример ответа:
{
  "id": 156,
  "username": "Дима",
  "age": 27,
  "role": admin
}

Код выполненного задания выглядит следующим образом:
'''
# импортируем класс FastAPI
from fastapi import FastAPI
# импортируем функции для генерации случайных чисел и случайного выбора
from random import randint, choice

# создаем объект приложения 
app = FastAPI()

# приветствие в приложении
@app.get('/')
async def root():
    return {'message': 'Добро пожаловать в мое FastAPI-приложение!'}

# приветствие пользователя по имени
@app.get('/user/{username}')
async def greet_user(username: str):
    return {'username': username, 'message': f'Привет, {username}!'}

# отправка данных профиля пользователя
@app.get('/profile/{username}')
async def get_profile(username: str):
    user_id = randint(1, 999)
    age = randint(18, 99)
    role = choice(['user', 'admin'])
    return {
        'id': user_id,
        'username': username,
        'age': age,
        'role': role
    }